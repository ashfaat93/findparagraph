{"version":3,"sources":["Components/SearchPara.js","Components/FirebaseConfig.js","App.js","serviceWorker.js","index.js"],"names":["SearchPara","state","textToFind","for","className","placeholder","cols","rows","name","value","this","onChange","e","setState","target","props","showFindText","type","onClick","handlerFindText","handlerFindSimilarParas","id","Component","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","foundText","targetTextPortugues","srcTextEng","srcTextEngToAddInMemoryBank","targertTextEng","comparedTextResult","srcTextEngArray","targetTextEngArray","similarParaList","paraList","paraListTest","handlerConverStringToArray","split","handlerComparesion","returnComparedText","searchText","newList","filter","i","JSON","stringify","text","trim","length","alert","textPortugues","isParaSimilar","srcArray","targetArray","noOfSimilarWords","ii","noOfDifferentWords","toString","searchPara","searchParaArray","map","push","handlerAddToMemory","database","ref","handlerLoadData","_","on","snapShot","forEach","p","key","val","srcTextToCompareArray","targetTextToCompareArray","result","includes","italics","finalResult","join","replace","srcEng","style","color","targetEng","Accordion","defaultActiveKey","Card","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","spl","width","wordWrap","textTransform","backgroundColor","borderRadius","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29fdee17.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n\r\nclass SearchPara extends Component {\r\n  state = { textToFind: \"\" };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <label for=\"\">Text To Find </label> <br />\r\n        <textarea className=\"form-control\"\r\n        placeholder=\"Text To Find\"\r\n\r\n          cols=\"150\"\r\n          rows=\"5\"\r\n          name=\"textToFind\"\r\n          value={this.state.textToFind}\r\n          onChange={(e) => this.setState({ textToFind: e.target.value })}\r\n        ></textarea>\r\n        <br />\r\n        <div>\r\n        {\r\n            this.props.showFindText &&\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary btn-sm margin mx-2\"\r\n            onClick={() => this.props.handlerFindText(this.state.textToFind)}\r\n          >\r\n            Find For Me\r\n          </button>\r\n        }\r\n          {\r\n            !this.props.showFindText &&\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary btn-sm mx-2\"\r\n            onClick={() =>\r\n              this.props.handlerFindSimilarParas(this.state.textToFind)\r\n            }\r\n          >\r\n            Find List of Similar Paras\r\n          </button>\r\n          }\r\n        </div>\r\n\r\n\r\n        <hr />\r\n        <div id=\"ForCollapseFunctionality\">\r\n       \r\n        </div>\r\n      </div> //end of main div\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchPara;\r\n","import * as firebase from 'firebase';\r\nimport 'firebase/storage';\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBttceR-a_8v4eBhOmNe8-GNeQITDnRUmE\",\r\n    authDomain: \"findparagraph.firebaseapp.com\",\r\n    databaseURL: \"https://findparagraph.firebaseio.com\",\r\n    projectId: \"findparagraph\",\r\n    storageBucket: \"findparagraph.appspot.com\",\r\n    messagingSenderId: \"796880653179\",\r\n    appId: \"1:796880653179:web:0648ea476587bf495d0bde\"\r\n  };\r\n  // Initialize Firebase\r\n   firebase.initializeApp(firebaseConfig);\r\n\r\n  const storage= firebase.storage();\r\n  export {\r\n      storage, firebase as default\r\n  }","\nimport React, { Component } from 'react';\nimport SearchPara from './Components/SearchPara';\nimport { Accordion, Card, Button } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport firebase from './Components/FirebaseConfig';\n\nclass App extends Component {\n  state = {\n    textToFind: \"\",\n    foundText: \"\",\n    targetTextPortugues: \"\",\n    srcTextEng: \"\",\n    srcTextEngToAddInMemoryBank:\"\",\n    targertTextEng: \"\",\n    comparedTextResult: \"\",\n    srcTextEngArray: [],\n    targetTextEngArray: [],\n    similarParaList: [],\n    paraList: [],\n    paraListTest: \"\",\n    // paraList: [\n    //   {\n    //     id: 0,\n    //     text:\n    //       \"Dr. Miguel Fernández Department of Linguistics Applied Science and Technology, Higher Technical School  Building, Polytechnic University of MadridAvda. Juan de Herrera nº 6 28040 Madrid.\",\n    //     textPortugues: \"\",\n    //   },\n    //   {\n    //     id: 1,\n    //     text:\n    //       \"Dr. Arezou Zalipour School of Language Studies and Linguistics Faculty of Social Sciences and Humanities National University of Malaysia (UKM)  Selangor,  Malaysia.\",\n    //     textPortugues: \"\",\n    //   },\n    //   {\n    //     id: 2,\n    //     text:\n    //       \"Dr. Gabriel Julien Research Supervisor University of the West Indies St. Augustine, Trinidad and Tobago\",\n    //     textPortugues:\n    //       \"Dr. Gabriel Julien Supervisor de Pesquisa Universidade das Índias Ocidentais Santo Agostinho, Trinidad e Tobago\",\n    //   },],\n\n\n    }\n\n    handlerConverStringToArray = () => {\n      this.setState({\n        srcTextEngArray: this.state.srcTextEng.split(\" \"),\n        targetTextEngArray: this.state.targertTextEng.split(\" \"),\n      });\n    };\n    handlerComparesion = () => {\n      if (this.state.srcTextEng !== \"\" && this.state.targertTextEng !== \"\") {\n       \n        this.setState({ comparedTextResult: this.returnComparedText() });\n      }\n    };\n    returnComparedText() {\n      const srcTextToCompareArray = this.state.srcTextEng.split(\" \");\n      let targetTextToCompareArray = this.state.targertTextEng.split(\" \");\n      let result = [];\n  \n      result.push(\n        srcTextToCompareArray.map((i) =>\n          targetTextToCompareArray.includes(i) ? i : i.italics()\n        )\n      );\n      let finalResult = result.join(\" \");\n      \n      finalResult = finalResult.replace(/,/g, \" \");\n      return finalResult;\n    }\n    handlerFindText = (searchText) => {\n      // console.log(this.state.paraList);\n  \n      const newList = this.state.paraList.filter(\n        (i) => JSON.stringify(i.text.trim()) === JSON.stringify(searchText.trim())\n      );\n  \n      newList.length <= 0\n        ? alert(\"Record Not Found\")\n        : this.setState({ foundText: newList[0].textPortugues });\n    };\n      isParaSimilar = (srcArray,targetArray) => {\n        let noOfDifferentWords =0;\n        let noOfSimilarWords =0;\n  \n        let lengthDifferenceInArrays=(srcArray.length-targetArray.length>0) ? srcArray.length-targetArray.length :targetArray.length-srcArray.length\n        \n     \n         if(lengthDifferenceInArrays<=10)\n         {\n           for (let ii=0;ii<srcArray.length;ii++)\n           {\n           \n             (srcArray[ii]===targetArray[ii]) ? noOfSimilarWords++ : noOfDifferentWords++ ;\n           }\n           if (noOfSimilarWords>=4){\n            alert(srcArray.toString());\n            return true;\n           } \n          \n         }\n         \n         return false;\n     }\n    handlerFindSimilarParas = (searchPara) => {\n      const searchParaArray = searchPara.split(\" \");\n      \n      const similarParaList = [];\n      let targetArray = [];\n      this.state.paraList.map((i)=> {\n        targetArray = i.text.split(\" \") ;\n        let isAddPara = this.isParaSimilar(searchParaArray,targetArray);\n        // alert(isAddPara);\n       if(isAddPara){\n         alert(`found para =${targetArray.toString()}`);\n         similarParaList.push(i);}\n      });\n  \n     \n  \n      this.setState({ similarParaList });\n      similarParaList.length > 0\n        ? alert(\"Similar Para List Is availabel\")\n        : alert(\"No Similar Para Found\");\n     \n    };\n\n\n    handlerAddToMemory = e =>{\n      const {srcTextEngToAddInMemoryBank,targetTextPortugues,id} = this.state;\n      firebase.database().ref('Paras').push({\n        \n          text:srcTextEngToAddInMemoryBank,\n          textPortugues:targetTextPortugues\n        });\n        this.setState({srcTextEngToAddInMemoryBank:'',targetTextPortugues:''});\n    }//end of handlerAddToMemory\n\n    handlerLoadData = _ =>{\n      \n        firebase.database()\n        .ref(\"Paras\")\n        .on(\"value\",\n        snapShot => {\n          let paraList = [];\n          snapShot.forEach(\n            p => {paraList.push({id:p.key,...p.val()})});\n            this.setState({paraList});\n           \n            // console.log(this.state.paraList);\n        });\n\n       \n      }\n        \n    \n    \n\ncomponentDidMount(){\n  this.handlerLoadData();\n  \n  \n}\n    render() { \n    //  console.log(this.state.paraList);\n    const srcEng = this.state.srcTextEngArray.map((i) => {\n      return this.state.targetTextEngArray.includes(i) ? (\n        i + \" \"\n      ) : (\n        <space style={{ color: \"red\" }}>\n          <b>{i+ \" \"}</b>\n        </space>\n      );\n    });\n\n    const targetEng = this.state.targetTextEngArray.map((i) => {\n      return this.state.srcTextEngArray.includes(i) ? (\n        i + \" \"\n      ) :  (\n        <space style={{ color: \"red\" }}>\n          <b>{i + \" \"}</b>\n        </space>\n      );\n    });\n    return (\n    //////////////Exported Code Start\n    <div>\n\n        <div className=\"App\">\n        \n          <Accordion defaultActiveKey=\"5\">\n        \n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n              Find Paragraphs\n              </Accordion.Toggle>\n            </Card.Header>\n        \n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body>\n                    <SearchPara\n                      handlerFindText={this.handlerFindText}\n                      handlerFindSimilarParas={this.handlerFindSimilarParas}\n                      showFindText={true}\n                    />\n                    <div id=\"por\">{this.state.foundText}</div>\n                \n        \n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        \n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                Find Similars Paragraphs\n              </Accordion.Toggle>\n            </Card.Header>\n        \n            <Accordion.Collapse eventKey=\"1\">\n              <Card.Body>\n              <SearchPara\n                      handlerFindText={this.handlerFindText}\n                      handlerFindSimilarParas={this.handlerFindSimilarParas}\n                      showFindText={false}\n                    />\n                    <div id=\"similarPara\">\n                    <ul>\n                      {this.state.similarParaList.map((spl) => (\n                        <li key={spl.id}>{spl.text}</li>\n                      ))}\n                    </ul>\n                  </div>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        \n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\">\n              Compare Paras\n              </Accordion.Toggle>\n            </Card.Header>\n        \n            <Accordion.Collapse eventKey=\"2\">\n              <Card.Body>\n            \n                    <label>Source Text In English</label>\n                    <br />\n                    <textarea className=\"form-control\"\n                    placeholder=\"Source Text In English\"\n                      name=\"srcTextEng\"\n                      id=\"\"\n                      cols=\"150\"\n                      rows=\"10\"\n                      value={this.state.srcTextEng}\n                      onChange={(e) => {\n                        this.setState({ srcTextEng: e.target.value });\n                      }}\n                    ></textarea>\n                    <br />\n                    <hr />\n        \n                    <label>Target Text In English</label>\n                    <br />\n                    <textarea className=\"form-control\"\n                    placeholder=\"Target Text In English\"\n                      name=\"targertTextEng\"\n                      id=\"\"\n                      cols=\"150\"\n                      rows=\"10\"\n                      value={this.state.targertTextEng}\n                      onChange={(e) => {\n                        this.setState({ targertTextEng: e.target.value });\n                      }}\n                    ></textarea>\n                  <hr/>\n                  <button\n                    className=\"btn btn-primary\"\n                    onClick={this.handlerConverStringToArray}\n                  >\n                    Show Difference\n                  </button>\n        \n                  <div\n                    style={{\n                      width: \"600px\",\n                      wordWrap: \"break-word\",\n                      textTransform: \"capitalize\",\n                      backgroundColor:\"#f2e4f5\",borderRadius:\"25px\",padding:\"5px\" \n                    }}\n                  >\n                    <h5>Source text</h5>\n        \n                    {srcEng}\n                  </div>\n                      <hr/>\n                  <div\n                    style={{\n                      width: \"600px\",\n                      wordWrap: \"break-word\",\n                      textTransform: \"capitalize\",\n                      backgroundColor:\"#ede9ce\",borderRadius:\"25px\",padding:\"5px\" \n                    }}\n                  >\n                    <h5>Target text</h5>\n                    {targetEng}\n                  </div>\n                  \n                    <div>{this.state.comparedTextResult}</div>\n        \n                    \n                    \n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        \n          <Card>\n            <Card.Header>\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"3\">\n              Add To Data Bank\n              </Accordion.Toggle>\n            </Card.Header>\n        \n            <Accordion.Collapse eventKey=\"3\">\n              <Card.Body>\n              <label>Text In English</label>\n              <textarea className=\"form-control\"\n                    placeholder=\"Source Text In English\"\n                      name=\"srcTextEngToAddInMemoryBank\"\n                      id=\"\"\n                      cols=\"150\"\n                      rows=\"10\"\n                      value={this.state.srcTextEngToAddInMemoryBank}\n                      onChange={(e) => {\n                        this.setState({ srcTextEngToAddInMemoryBank: e.target.value });\n                      }}\n                    ></textarea>\n                    <br />\n                  \n              <label>Translated Text in Portugues</label>\n                    <br />\n                    <textarea className=\"form-control\"\n                      placeholder=\"Translated Text in Portugues\"\n                      name=\"targetTextPortugues\"\n                      id=\"\"\n                      cols=\"150\"\n                      rows=\"10\"\n                      value={this.state.targetTextPortugues}\n                      onChange={(e) => {\n                        this.setState({ targetTextPortugues: e.target.value });\n                      }}\n                    ></textarea>\n                    <br />\n                    <button  className=\"btn btn-primary\" onClick={this.handlerAddToMemory}>\n                      Add to Memory Bank\n                    </button>\n                  \n        \n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        \n        </Accordion>\n        \n        </div>\n        {/* <button onClick={()=>console.log(this.state.paraList)}>Show List</button> */}\n    </div>\n        );\n         //////////////Exported Code End\n \n      }\n    }\n   \n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}